// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 29vNMWd6gz8N9ALUqwUWht
// Component: BMkc0EuDDlqd
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { SupabaseQuery } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: Ep7SWTTde6y/codeComponent
import { SupabaseMutation } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: MpBsVbetChrB/codeComponent
import { FormContextComponent } from "../../CodeComponents/Form"; // plasmic-import: W8FD_9MRLOB/codeComponent
import { FormTextInput } from "../../CodeComponents/Form"; // plasmic-import: FiFApZHo28T/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: z1e2z9ksSf_/component
import Button from "../../Button"; // plasmic-import: PNlHKnwGUdd/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_copy_of_supabase.module.css"; // plasmic-import: 29vNMWd6gz8N9ALUqwUWht/projectcss
import sty from "./PlasmicPostUpdate.module.css"; // plasmic-import: BMkc0EuDDlqd/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: rxgjZMygkgzb/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: KjxJVFK6jeX2/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 8Mx7VG07ecTo/icon

export type PlasmicPostUpdate__VariantMembers = {};

export type PlasmicPostUpdate__VariantsArgs = {};
type VariantPropType = keyof PlasmicPostUpdate__VariantsArgs;
export const PlasmicPostUpdate__VariantProps = new Array<VariantPropType>();

export type PlasmicPostUpdate__ArgsType = {
  test?: any;
  id?: string;
};

type ArgPropType = keyof PlasmicPostUpdate__ArgsType;
export const PlasmicPostUpdate__ArgProps = new Array<ArgPropType>("test", "id");

export type PlasmicPostUpdate__OverridesType = {
  root?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  supabaseQuery?: p.Flex<typeof SupabaseQuery>;
  supabaseMutation?: p.Flex<typeof SupabaseMutation>;
  formContext?: p.Flex<typeof FormContextComponent>;
  textarea?: p.Flex<"textarea">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultPostUpdateProps {}

function PlasmicPostUpdate__RenderFunc(props: {
  variants: PlasmicPostUpdate__VariantsArgs;
  args: PlasmicPostUpdate__ArgsType;
  overrides: PlasmicPostUpdate__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__xxN5O)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__t0D3G)}>
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zSkJl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cAtRz
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          <h3
                            data-plasmic-name={"h3"}
                            data-plasmic-override={overrides.h3}
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3
                            )}
                          >
                            {"Post"}
                          </h3>
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                    </div>
                  ) : null}
                </div>
              ) : null}

              <SupabaseQuery
                data-plasmic-name={"supabaseQuery"}
                data-plasmic-override={overrides.supabaseQuery}
                className={classNames("__wab_instance", sty.supabaseQuery)}
                columns={"title, content, id, imageUrl" as const}
                filters={[
                  {
                    name: "eq",
                    args: [{ column: "id", value: "{{local.id}}" }]
                  }
                ]}
                single={true}
                tableName={"posts" as const}
              >
                <SupabaseMutation
                  data-plasmic-name={"supabaseMutation"}
                  data-plasmic-override={overrides.supabaseMutation}
                  className={classNames("__wab_instance", sty.supabaseMutation)}
                  data={{
                    title: "{{form.title}}",
                    content: "{{form.content}}",
                    imageUrl: "{{form.imageUrl}}"
                  }}
                  filters={[
                    {
                      name: "eq",
                      args: [{ column: "id", value: "{{local.id}}" }]
                    }
                  ]}
                  method={"update" as const}
                  redirectOnSuccess={"/" as const}
                  tableName={"posts" as const}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kdVhj)}
                    >
                      <FormContextComponent
                        data-plasmic-name={"formContext"}
                        data-plasmic-override={overrides.formContext}
                        className={classNames(
                          "__wab_instance",
                          sty.formContext
                        )}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eHfHm
                            )}
                          >
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__o6XsW
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dFfiJ
                                  )}
                                >
                                  {"Title"}
                                </div>

                                <FormTextInput
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formTextInput__pRK
                                  )}
                                  defaultValue={"{{query.title}}" as const}
                                  name={"title" as const}
                                >
                                  <TextInput
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput__aWoBn
                                    )}
                                  />
                                </FormTextInput>
                              </p.Stack>
                            ) : null}
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___4Km1A
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xdHjR
                                  )}
                                >
                                  {"ImageUrl"}
                                </div>

                                <FormTextInput
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formTextInput__buFeG
                                  )}
                                  defaultValue={"{{query.imageUrl}}" as const}
                                  name={"imageUrl" as const}
                                >
                                  <TextInput
                                    className={classNames(
                                      "__wab_instance",
                                      sty.textInput__il9Tq
                                    )}
                                  />
                                </FormTextInput>
                              </p.Stack>
                            ) : null}
                            {true ? (
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jbGg3
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zzs8F
                                  )}
                                >
                                  {"Description"}
                                </div>

                                <FormTextInput
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formTextInput__rHmpU
                                  )}
                                  defaultValue={"{{query.content}}" as const}
                                  name={"content" as const}
                                >
                                  <textarea
                                    data-plasmic-name={"textarea"}
                                    data-plasmic-override={overrides.textarea}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.textarea,
                                      sty.textarea
                                    )}
                                    id={"" as const}
                                    placeholder={"Enter something..." as const}
                                    value={"" as const}
                                  />
                                </FormTextInput>
                              </p.Stack>
                            ) : null}
                            {true ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__kPJzn
                                )}
                              >
                                <Button
                                  data-plasmic-name={"button"}
                                  data-plasmic-override={overrides.button}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__li084
                                    )}
                                  >
                                    {"Update"}
                                  </div>
                                </Button>
                              </div>
                            ) : null}
                          </div>
                        ) : null}
                      </FormContextComponent>
                    </div>
                  ) : null}
                </SupabaseMutation>
              </SupabaseQuery>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h3",
    "supabaseQuery",
    "supabaseMutation",
    "formContext",
    "textarea",
    "button"
  ],
  h3: ["h3"],
  supabaseQuery: [
    "supabaseQuery",
    "supabaseMutation",
    "formContext",
    "textarea",
    "button"
  ],
  supabaseMutation: ["supabaseMutation", "formContext", "textarea", "button"],
  formContext: ["formContext", "textarea", "button"],
  textarea: ["textarea"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h3: "h3";
  supabaseQuery: typeof SupabaseQuery;
  supabaseMutation: typeof SupabaseMutation;
  formContext: typeof FormContextComponent;
  textarea: "textarea";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPostUpdate__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPostUpdate__VariantsArgs;
    args?: PlasmicPostUpdate__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPostUpdate__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPostUpdate__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPostUpdate__ArgProps,
      internalVariantPropNames: PlasmicPostUpdate__VariantProps
    });

    return PlasmicPostUpdate__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPostUpdate";
  } else {
    func.displayName = `PlasmicPostUpdate.${nodeName}`;
  }
  return func;
}

export const PlasmicPostUpdate = Object.assign(
  // Top-level PlasmicPostUpdate renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    supabaseQuery: makeNodeComponent("supabaseQuery"),
    supabaseMutation: makeNodeComponent("supabaseMutation"),
    formContext: makeNodeComponent("formContext"),
    textarea: makeNodeComponent("textarea"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicPostUpdate
    internalVariantProps: PlasmicPostUpdate__VariantProps,
    internalArgProps: PlasmicPostUpdate__ArgProps
  }
);

export default PlasmicPostUpdate;
/* prettier-ignore-end */
